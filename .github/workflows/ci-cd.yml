name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run tests
      run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Copy project files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        source: ".,!node_modules,!.git,!.github"
        target: ${{ secrets.APP_DIRECTORY || '/var/www/tg-app' }}
        strip_components: 1
        
    - name: Setup systemd service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          APP_DIR="${{ secrets.APP_DIRECTORY || '/var/www/tg-app' }}"
          
          # Copy systemd service file
          sudo cp "$APP_DIR/tg.service" /etc/systemd/system/
          sudo systemctl daemon-reload
          
          # Make scripts executable
          chmod +x "$APP_DIR/scripts/"*.sh
          
          echo "‚úÖ Systemd service configured"
        
    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          APP_DIR="${{ secrets.APP_DIRECTORY || '/var/www/tg-app' }}"
          
          # Set environment variables for deployment
          export APP_DIRECTORY="$APP_DIR"
          export APP_URL="${{ secrets.APP_URL }}"
          
          # Run deployment script
          cd "$APP_DIR"
          ./scripts/deploy.sh
          
          echo "‚úÖ Deployment completed successfully"
          
    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "üîç Starting health check..."
          APP_DIR="${{ secrets.APP_DIRECTORY || '/var/www/tg-app' }}"
          APP_URL="${{ secrets.APP_URL }}"
          
          # Check Docker container status
          echo "üê≥ Checking Docker container status..."
          cd "$APP_DIR"
          if docker-compose ps app-prod | grep -q "Up"; then
            echo "‚úÖ Docker container is running"
            echo "üìä Container stats:"
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" $(docker-compose ps -q app-prod) 2>/dev/null || echo "Container stats not available"
          else
            echo "‚ùå Docker container is not running"
            echo "üìã Container logs:"
            docker-compose logs --tail=20 app-prod
            exit 1
          fi
          
          # Check systemd service status
          echo "üîß Checking systemd service status..."
          if systemctl is-active --quiet tg.service; then
            echo "‚úÖ tg.service is running"
          else
            echo "‚ùå tg.service is not running"
            sudo systemctl status tg.service
            exit 1
          fi
          
          # Test local HTTP connection
          echo "üåê Testing local HTTP connection..."
          if curl -f -s -o /dev/null http://localhost/; then
            echo "‚úÖ Local HTTP connection works"
          else
            echo "‚ùå Local HTTP connection failed"
            echo "üìã Container logs:"
            docker-compose logs --tail=10 app-prod
            exit 1
          fi
          
          # Test health endpoint
          echo "üè• Testing health endpoint..."
          if curl -f -s http://localhost/health | grep -q "healthy"; then
            echo "‚úÖ Health endpoint responding"
          else
            echo "‚ö†Ô∏è Health endpoint not responding (might be normal)"
          fi
          
          # Test external connection if APP_URL is provided
          if [ -n "$APP_URL" ]; then
            echo "üåç Testing external connection: $APP_URL"
            sleep 5  # Wait for any nginx reload
            if curl -f -s -o /dev/null "$APP_URL"; then
              echo "‚úÖ External connection successful"
            else
              echo "‚ö†Ô∏è External connection failed"
              echo "üîç DNS resolution test:"
              DOMAIN=$(echo "$APP_URL" | sed 's|https\?://||' | sed 's|/.*||')
              nslookup "$DOMAIN" || echo "DNS resolution failed"
              echo "üí° Check DNS, SSL certificates, and firewall settings"
            fi
          else
            echo "‚ö†Ô∏è APP_URL not provided, skipping external connection test"
          fi
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi
