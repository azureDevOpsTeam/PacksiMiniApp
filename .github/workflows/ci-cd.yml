name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run tests
      run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # Navigate to application directory
          cd ${{ secrets.APP_DIRECTORY || '/var/www/packsi-mini-app' }}
          
          # Create backup of current deployment
          sudo mkdir -p backups
          sudo tar -czf backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz dist/ || true
          
          # Remove old files
          sudo rm -rf dist/
          
          # Create new directory
          sudo mkdir -p dist/
          
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        source: "dist/*"
        target: ${{ secrets.APP_DIRECTORY || '/var/www/packsi-mini-app' }}
        
    - name: Set permissions and restart services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # Set proper permissions
          cd ${{ secrets.APP_DIRECTORY || '/var/www/packsi-mini-app' }}
          sudo chown -R www-data:www-data dist/
          sudo chmod -R 755 dist/
          
          # Restart web server (nginx/apache)
          sudo systemctl reload nginx || sudo systemctl reload apache2 || true
          
          # Optional: Clear cache if using any
          # sudo rm -rf /var/cache/nginx/* || true
          
          # Verify deployment
          echo "Verifying deployment..."
          if [ -f "dist/index.html" ]; then
            echo "‚úÖ index.html found"
            ls -la dist/
          else
            echo "‚ùå index.html not found"
            exit 1
          fi
          
    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "üîç Starting health check..."
          APP_DIR="${{ secrets.APP_DIRECTORY || '/var/www/packsi-mini-app' }}"
          APP_URL="${{ secrets.APP_URL || 'https://bot.draton.io' }}"
          
          # Check if files exist on server
          echo "üìÅ Checking deployment files..."
          if [ -f "$APP_DIR/dist/index.html" ]; then
            echo "‚úÖ index.html found on server"
            echo "üìä File count: $(find $APP_DIR/dist -type f | wc -l) files"
            echo "üìè Total size: $(du -sh $APP_DIR/dist | cut -f1)"
          else
            echo "‚ùå index.html not found on server at $APP_DIR/dist/"
            echo "üìÇ Directory contents:"
            ls -la "$APP_DIR/" || echo "Directory does not exist"
            exit 1
          fi
          
          # Check Nginx status
          echo "üîß Checking Nginx status..."
          if systemctl is-active --quiet nginx; then
            echo "‚úÖ Nginx is running"
          else
            echo "‚ùå Nginx is not running"
            sudo systemctl status nginx
            exit 1
          fi
          
          # Test local HTTP connection
          echo "üåê Testing local HTTP connection..."
          if curl -f -s -o /dev/null http://localhost/; then
            echo "‚úÖ Local HTTP connection works"
          else
            echo "‚ùå Local HTTP connection failed"
            echo "üìã Nginx error logs:"
            sudo tail -n 10 /var/log/nginx/error.log || echo "Cannot read error logs"
          fi
          
          # Test external connection
          echo "üåç Testing external connection: $APP_URL"
          sleep 5  # Wait for any nginx reload
          if curl -f -s -o /dev/null "$APP_URL"; then
            echo "‚úÖ External HTTPS connection successful"
          else
            echo "‚ö†Ô∏è HTTPS failed, trying HTTP..."
            HTTP_URL=$(echo "$APP_URL" | sed 's/https:/http:/')
            if curl -f -s -o /dev/null "$HTTP_URL"; then
              echo "‚úÖ HTTP connection works (consider SSL setup)"
            else
              echo "‚ùå Both HTTPS and HTTP failed"
              echo "üîç DNS resolution test:"
              DOMAIN=$(echo "$APP_URL" | sed 's|https\?://||' | sed 's|/.*||')
              nslookup "$DOMAIN" || echo "DNS resolution failed"
              echo "‚ö†Ô∏è Deployment completed but external access has issues"
              echo "üí° Check DNS, SSL certificates, and firewall settings"
            fi
          fi
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi